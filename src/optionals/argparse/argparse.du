import System;

class Args {
    init(private name, private desc) {}
}

class Parser {
    private args;
    private preArgs;
    private required;

    init(private name, private desc, private userUsage = '') {
        this.args = Args(name, desc);
        this.preArgs = [];
        this.required = [];
    }

    private flagExists(flag) {
        for (var i = 0; i < this.preArgs.len(); i+=1) {
            if (this.preArgs[i]['flag'] == flag) {
                return true;
            }
        }

        return false;
    }

    private addFlag(flagType, flag, desc, required, ...metavar) {
        if (not this.flagExists(flag)) {
            var arg = {
                'type': flagType,
                'flag': flag,
                'desc': desc,
                'required': required
            };

            if (metavar.len() == 1) {
                arg['metavar'] = metavar[0];
            }

            this.preArgs.push(arg);

            if (required) {
                this.required.push(flag);
            }
        }
    }

    addString(flag, desc, required, ...metavar) {
        this.addFlag('string', flag, desc, required, ...metavar);
    }

    addNumber(flag, desc, required, ...metavar) {
        this.addFlag('number', flag, desc, required, ...metavar);
    }

    addBool(flag, desc, required, ...metavar) {
        this.addFlag('bool', flag, desc, required, ...metavar);
    }

    addList(flag, desc, required, ...metavar) {
        this.addFlag('list', flag, desc, required, ...metavar);
    }

    usage() {
        if (this.userUsage == '') {
            var u = 'usage: {}\n    {}\n\n'.format(this.name, this.desc);

            for (var i = 0; i < this.preArgs.len(); i+=1) {
                u += '    {}    {}{}\n'.format(
                    this.preArgs[i]['flag'],
                    this.preArgs[i]['desc'],
                    this.preArgs[i]['required'] ? '    Required' : ''
                );
            }

            return u;
        }

        return this.userUsage;
    }

    private hasRequired() {
        var found = 0;
        for (var i = 0; i < System.argv.len(); i+=1) {
            for (var j = 0; j < this.required.len(); j+=1) {
                if (System.argv[i] == this.required[j]) {
                    found += 1;
                }
            }
        }

        if (found == this.required.len()) {
            return true;
        }

        return false;
    }

    private fillEmpty() {
        for (var i = 0; i < this.preArgs.len(); i += 1) {
            const arg = this.preArgs[i];

            if (arg.get('metavar') and not this.args.getAttribute(arg['metavar'])) {
                this.args.setAttribute(arg['metavar'], nil);

                continue;
            }

            const flag = arg['flag'].replace('-', '');
            if (not this.args.getAttribute(flag)) {
                this.args.setAttribute(flag, nil);
            }
        }
    }

    parse() {
        for (var i = 0; i < System.argv.len(); i+=1) {
            for (var j = 0; j < this.preArgs.len(); j+=1) {
                if (System.argv[i] == this.preArgs[j]['flag']) {
                    if (this.preArgs[j]['type'] == 'bool') {
                        if (this.preArgs[j].exists('metavar') and this.preArgs[j]['metavar'] != '') {
                            this.args.setAttribute(this.preArgs[j]['metavar'], true);
                        } else {
                            this.args.setAttribute(this.preArgs[j]['flag'].replace('-', ''), true);
                        }
                        
                    } else if (this.preArgs[j]['type'] == 'list') {
                        if (i == (System.argv.len() - 1) or System.argv[i+1][0] == '-') {
                            return Error('{} requires an argument'.format(System.argv[i]));
                        }

                        if (this.preArgs[j].exists('metavar') and this.preArgs[j]['metavar'] != '') {
                            this.args.setAttribute(this.preArgs[j]['metavar'], System.argv[i+1].split(','));   
                        } else {
                            this.args.setAttribute(this.preArgs[j]['flag'].replace('-', ''), System.argv[i+1].split(','));
                        }
                    } else if (this.preArgs[j]['type'] == 'number') {
                        if (i == (System.argv.len() - 1)) {
                            return Error('{} requires an argument'.format(System.argv[i]));
                        }

                        const res = System.argv[i+1].toNumber();
                        if (not res.success()) {
                            return Error('{} arg must be a number'.format(System.argv[i]));
                        }

                        if (this.preArgs[j].exists('metavar') and this.preArgs[j]['metavar'] != '') {
                            print(this.preArgs[j]['metavar']);
                            this.args.setAttribute(this.preArgs[j]['metavar'], res.unwrap());
                        } else {
                            this.args.setAttribute(this.preArgs[j]['flag'].replace('-', ''), res.unwrap());
                        }
                    } else {
                        if (i == (System.argv.len() - 1) or System.argv[i+1][0] == '-') {
                            return Error('{} requires an argument'.format(System.argv[i]));
                        }

                        if (this.preArgs[j].exists('metavar') and this.preArgs[j]['metavar'] != '') {
                            this.args.setAttribute(this.preArgs[j]['metavar'], System.argv[i+1]);
                        } else {
                            this.args.setAttribute(this.preArgs[j]['flag'].replace('-', ''), System.argv[i+1]);
                        }
                    }
                }
            }
        }

        if (not this.hasRequired()) {
            return Error('1 or more required flags missing');
        }

        this.fillEmpty();

        return Success(this.args);
    }
}
